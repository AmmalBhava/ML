import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# Step 1: Load the car dataset
# For demonstration, you can replace this with your own dataset (CSV file).
# The dataset should contain features like make, model, year, mileage, etc.
# Here, we use a sample dataset for demonstration purposes.

data = {
    'make': ['Toyota', 'Honda', 'Ford', 'BMW', 'Audi', 'Toyota', 'Honda', 'BMW'],
    'model': ['Corolla', 'Civic', 'Focus', 'X5', 'A4', 'Camry', 'Accord', 'X3'],
    'year': [2010, 2012, 2015, 2017, 2016, 2011, 2013, 2018],
    'mileage': [120000, 80000, 60000, 30000, 40000, 100000, 70000, 35000],
    'price': [8000, 10000, 12000, 35000, 28000, 8500, 10500, 34000]
}

df = pd.DataFrame(data)

# Step 2: Preprocess the data
# Convert categorical columns to numeric using LabelEncoder
label_encoder = LabelEncoder()
df['make'] = label_encoder.fit_transform(df['make'])
df['model'] = label_encoder.fit_transform(df['model'])

# Step 3: Define features (X) and target variable (y)
X = df[['make', 'model', 'year', 'mileage']]  # Features
y = df['price']  # Target variable (Price)

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Displaying evaluation metrics
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"R-squared (R2 Score): {r2:.2f}")

# Step 8: Visualize the predicted vs actual prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', edgecolor='k', alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2, color='red')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Car Prices')
plt.show()
